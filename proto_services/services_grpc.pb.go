// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: services.proto

package proto_services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PriceServiceServiceClient is the client API for PriceServiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PriceServiceServiceClient interface {
	ReadFromStream(ctx context.Context, in *ReadFromStreamRequest, opts ...grpc.CallOption) (PriceServiceService_ReadFromStreamClient, error)
}

type priceServiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPriceServiceServiceClient(cc grpc.ClientConnInterface) PriceServiceServiceClient {
	return &priceServiceServiceClient{cc}
}

func (c *priceServiceServiceClient) ReadFromStream(ctx context.Context, in *ReadFromStreamRequest, opts ...grpc.CallOption) (PriceServiceService_ReadFromStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PriceServiceService_ServiceDesc.Streams[0], "/PriceServiceService/ReadFromStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &priceServiceServiceReadFromStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PriceServiceService_ReadFromStreamClient interface {
	Recv() (*ReadFromStreamResponse, error)
	grpc.ClientStream
}

type priceServiceServiceReadFromStreamClient struct {
	grpc.ClientStream
}

func (x *priceServiceServiceReadFromStreamClient) Recv() (*ReadFromStreamResponse, error) {
	m := new(ReadFromStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PriceServiceServiceServer is the server API for PriceServiceService service.
// All implementations must embed UnimplementedPriceServiceServiceServer
// for forward compatibility
type PriceServiceServiceServer interface {
	ReadFromStream(*ReadFromStreamRequest, PriceServiceService_ReadFromStreamServer) error
	mustEmbedUnimplementedPriceServiceServiceServer()
}

// UnimplementedPriceServiceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPriceServiceServiceServer struct {
}

func (UnimplementedPriceServiceServiceServer) ReadFromStream(*ReadFromStreamRequest, PriceServiceService_ReadFromStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadFromStream not implemented")
}
func (UnimplementedPriceServiceServiceServer) mustEmbedUnimplementedPriceServiceServiceServer() {}

// UnsafePriceServiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PriceServiceServiceServer will
// result in compilation errors.
type UnsafePriceServiceServiceServer interface {
	mustEmbedUnimplementedPriceServiceServiceServer()
}

func RegisterPriceServiceServiceServer(s grpc.ServiceRegistrar, srv PriceServiceServiceServer) {
	s.RegisterService(&PriceServiceService_ServiceDesc, srv)
}

func _PriceServiceService_ReadFromStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadFromStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PriceServiceServiceServer).ReadFromStream(m, &priceServiceServiceReadFromStreamServer{stream})
}

type PriceServiceService_ReadFromStreamServer interface {
	Send(*ReadFromStreamResponse) error
	grpc.ServerStream
}

type priceServiceServiceReadFromStreamServer struct {
	grpc.ServerStream
}

func (x *priceServiceServiceReadFromStreamServer) Send(m *ReadFromStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PriceServiceService_ServiceDesc is the grpc.ServiceDesc for PriceServiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PriceServiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PriceServiceService",
	HandlerType: (*PriceServiceServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadFromStream",
			Handler:       _PriceServiceService_ReadFromStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services.proto",
}
